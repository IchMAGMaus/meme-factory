import { Telegraf } from 'telegraf';
import * as dotenv from 'dotenv';

dotenv.config();

if (!process.env.BOT_TOKEN) {
  throw new Error('BOT_TOKEN must be provided!');
}

const bot = new Telegraf(process.env.BOT_TOKEN);

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.command('start', (ctx) => {
  const webAppUrl = process.env.WEBAPP_URL || 'https://your-app-url.vercel.app';
  
  ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Meme Factory! üéÆ\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –º–µ–º–Ω—É—é –∏–º–ø–µ—Ä–∏—é! üöÄ', {
    reply_markup: {
      inline_keyboard: [[
        {
          text: "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
          web_app: { url: webAppUrl }
        }
      ]]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±-—Ö—É–∫–æ–≤ –¥–ª—è Vercel
export default async function handler(req: any, res: any) {
  try {
    if (req.method === 'POST') {
      await bot.handleUpdate(req.body);
      res.status(200).json({ ok: true });
    } else {
      res.status(200).json({ message: 'Bot is running!' });
    }
  } catch (error) {
    console.error('Error in webhook handler:', error);
    res.status(500).json({ error: 'Failed to process update' });
  }
}