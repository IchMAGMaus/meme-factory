import { Telegraf } from 'telegraf';
import type { VercelRequest, VercelResponse } from '@vercel/node';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN!);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
bot.command('start', (ctx) => {
  ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Meme Factory! üéÆ\n\n–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –º–µ–º–Ω—É—é –∏–º–ø–µ—Ä–∏—é! üöÄ', {
    reply_markup: {
      inline_keyboard: [[
        {
          text: "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
          web_app: { url: process.env.WEBAPP_URL || 'https://meme-factory-l9od.vercel.app' }
        }
      ]]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook
export default async function handler(
  request: VercelRequest,
  response: VercelResponse
) {
  if (request.method === 'POST') {
    try {
      await bot.handleUpdate(request.body);
      response.status(200).json({ ok: true });
    } catch (error) {
      console.error('Error in webhook handler:', error);
      response.status(500).json({ error: 'Failed to process update' });
    }
  } else {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ webhook
    response.status(200).json({ 
      ok: true, 
      message: 'Meme Factory Bot webhook is running!',
      timestamp: new Date().toISOString()
    });
  }
}